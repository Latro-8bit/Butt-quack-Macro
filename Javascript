// ==UserScript==
// @name         ButtQuack Holder WS Macro
// @namespace    http://tampermonkey.net/
// @version      2025-03-23
// @description  macros for spikes(r), trap(f), soldier(shift), tank(z), .
// @author       latro
// @icon         https://i.imgur.com/LdtQYdJ_d.webp?maxwidth=760&fidelity=grand
// @match        *://*.moomoo.io/*
// @require      https://cdn.jsdelivr.net/npm/msgpack-lite@0.1.26/dist/msgpack.min.js

// @grant        none
// ==/UserScript==

//keybinds
var spikeKey = "r";
var boostKey = "f";
var turretKey = "h"; //doents rrly work
var millKey = "n";

var ws;
var boostType;
var spikeType;
var foodType;
var turretType;
var millType;
var primary;
var secondary;
var prim;
var shame = 0;
let heal = false;
var placerOn = false;
const myPlayer = {
  id: null,
  x: null,
  y: null,
  "dir": null,
  "object": null,
  "weapon": null,
  "clan": null,
  isLeader: null,
  hat: null,
  "accessory": null,
  isSkull: null
};
const menu = document.createElement("div");
menu.id = "MacroMenu";
menu.innerHTML = `<div class="MacroMenu-container">
        <h1 style="color: white;">Quack Macro</h1>
        <div class="MacroMenu-input">
            <label style="color: white;" for="spikeInput">Spike:</label>
            <input type="text" id="spikeInput" maxlength="1" pattern="[A-Za-z]" oninput="this.value = this.value.replace(/[^A-Za-z]/g, '')" value="${spikeKey}">
        </div>
        <div class="MacroMenu-input">
            <label style="color: white;" for="boostInput">Trap:</label>
            <input type="text" id="boostInput" maxlength="1" pattern="[A-Za-z]" oninput="this.value = this.value.replace(/[^A-Za-z]/g, '')" value="${boostKey}">
        </div>
        <div class="MacroMenu-input">
            <label style="color: white;" for="turretInput">Turret:</label>
            <input type="text" id="turretInput" maxlength="1" pattern="[A-Za-z]" oninput="this.value = this.value.replace(/[^A-Za-z]/g, '')" value="${turretKey}">
        </div>
        <div class="MacroMenu-input">
            <label style="color: white;" for="millInput">Mill:</label>
            <input type="text" id="millInput" maxlength="1" pattern="[A-Za-z]" oninput="this.value = this.value.replace(/[^A-Za-z]/g, '')"  value="${millKey}">

        </div>
        <div class="MacroMenu-input">
            <label style="color: white;">[P] Healer: </label>
            <span id="healer" style= "color: #cc5151;">FALSE</span>
        </div>
        <div class="MacroMenu-input">
            <label style="color: white;">[L] Placer: </label>
            <span id="placer" style="color: #cc5151;">FALSE</span>
        </div>
</div>`;
menu.style.fontFamily = "'Hammersmith One, sans-serif'";
menu.style.position = "absolute";
menu.style.top = "10px";
menu.style.left = "10px";
menu.style.padding = "10px";
menu.style.backgroundColor = "#00000000";
menu.style.border = "1.5px solid #00000000";
menu.style.borderRadius = "4px";
menu.style.boxShadow = "0 2px 4px rgba(0,0,0,0)";
menu.style.zIndex = "9999";
menu.style.display = "none";
menu.style.maxWidth = "200px";

const style = document.createElement("style");
//CSS
style.innerHTML = `
    .MacroMenu-container h1 {
        margin: 0;
        padding: 10px 0;
        text-align: center;
        font-size: 24px;

    }
    .MacroMenu-input {
        margin: 15px 0;
        display: flex;
        align-items: center;
    }
    .MacroMenu-input label {
        width: 200px;
        font-size: 18px;
    }
    .MacroMenu-input span {
        font-size: 18px;
        text-transform: uppercase;
          text-shadow:
    -0.8px -0.8px 0 #000,
    0.8px -0.8px 0 #000,
    -0.8px 0.8px 0 #000,
    0.8px 0.8px 0 #000;


    }
    .MacroMenu-input input {
        flex: 1;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
        width: 20px;
    }`;

document.head.appendChild(style);
document.body.appendChild(menu);
menu.addEventListener("input", updateKeys);
function updateKeys() {
    spikeKey = document.getElementById("spikeInput").value;
    boostKey = document.getElementById("boostInput").value;
    turretKey = document.getElementById("turretInput").value;
    millKey = document.getElementById("millInput").value;
}
let whereverifybutton = document.querySelector("#altcha_checkbox");
function clicktheverify() {
  if (whereverifybutton) {
    whereverifybutton.click();
  }
}

function change(id, tog){
    const element = document.getElementById(id);
    element.textContent = (tog); // Change text
    if (tog === "true" || tog === true) {
        element.style.color = "#8ecc51";
    }else{
        element.style.color = "#cc5151";
    }
}
setInterval(clicktheverify, 1000);
document.msgpack = msgpack;
function n() {
  this.buffer = new Uint8Array([0]);
  this.buffer.__proto__ = new Uint8Array();
  this.type = 0;
}
WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function (m) {
  if (!ws) {
    document.ws = this;
    ws = this;
    socketFound(this);
  }
  this.oldSend(m);
};
function socketFound(socket) {
  socket.addEventListener("message", function (_0x1ff389) {
    handleMessage(_0x1ff389);
  });
}
function handleMessage(_0x1e1182) {
    let temp = msgpack.decode(new Uint8Array(_0x1e1182.data));
    let data;
    if (temp.length > 1) {
        data = [temp[0], ...temp[1]];
        if (data[1] instanceof Array) {
            data = data;
        }
    } else {
        data = temp;
    }
    function doMaxHeal() {
        for (let i = 0; i < Math.ceil(Math.min(100 - data[2]) / 20); i++) {
            cplace(foodType);
        }
    }
    let healTimeout;
    function slowHeal(timeout) {
        setTimeout(() =>{
            doMaxHeal();
        },timeout);
    }
    let item = data[0];
    if(!data) {return};
    update();
    if (item == 'C' && true) {
        myPlayer.id = data[1];
    }
    if (heal == 1){
        if (item == 'O'&& data[2] < 100 && data[2] > 0 && data[1] == myPlayer.id) {
            healTimeout = (data[2] + window.pingTime + 25);
            slowHeal(healTimeout);
        }
    }
    if (item == "a") {
        //enemiesNear = [];
        for (let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13 * i, 13 * i + 13);
            if (playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null){
                //enemiesNear.push(playerInfo);
            }
        }
    }
    update();
}
function place(item) {
  //doNewSend(['z', [_0x34ad4e, null]]);
  ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [item, null]]))));
  //doNewSend(['z', [null, true]]);
  //ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [null, true]]))));
}
function cplace(item, angle = null) {
  ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [item, null]]))));
  ws.send(new Uint8Array(Array.from(msgpack.encode(['F', [1, angle]]))));
  ws.send(new Uint8Array(Array.from(msgpack.encode(['F', [0, angle]]))));
  ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [myPlayer.weapon, true]]))));

}
let placed = false;
var repeater = function (_0x33a0aa, _0x5c57c6, _0x57f727, _0x11bcc3) {
  let _0x793543 = false;
  let _0x154079 = undefined;
  return {
    'start'(_0x5c036d) {
      if (_0x5c036d == _0x33a0aa && document.activeElement.id.toLowerCase() !== 'chatbox') {
        placed = true;
        _0x793543 = true;
        if (_0x154079 === undefined) {
          _0x154079 = setInterval(() => {
            _0x5c57c6();
            if (!_0x793543) {
              clearInterval(_0x154079);
              _0x154079 = undefined;
              console.log("claered");
            }
          }, _0x57f727);
        }
      }
    },
    'stop'(_0x533b4e) {
      if (_0x533b4e == _0x33a0aa && document.activeElement.id.toLowerCase() !== "chatbox") {
        placed = false;
        _0x793543 = false;
      }
    }
  };
};

const boostPlacer = repeater(boostKey, () => {
  cplace(boostType);
}, 45);
const spikePlacer = repeater(spikeKey, () => {
  cplace(spikeType);
}, 45);
const millPlacer = repeater(millKey, () => {
  cplace(millType);
}, 65);
const turretPlacer = repeater(turretKey, () => {
  cplace(turretType);
}, 65);
const placers = [boostPlacer, millPlacer, spikePlacer, turretPlacer];
document.addEventListener('keydown', event => {
    if (["allianceinput", 'chatbox', "nameinput", "storeHolder"].includes(document.activeElement.id.toLowerCase())) {
        return null;
    }
    if (event.keyCode == 27) {
        const menu = document.getElementById("MacroMenu");
        menu.style.display = menu.style.display === "none" ? "block" : "none";
    }
    if(placerOn == true){
        placers.forEach(_0x3101a9 => {
            _0x3101a9.start(event.key.toLowerCase());
        });
    }
        if ((event.key.toLowerCase() === spikeKey) && document.activeElement.id.toLowerCase() !== "chatbox") {
        // press R
            if(placerOn == false){
                place(spikeType);
            }
    }
    if ((event.key.toLowerCase() === boostKey) && document.activeElement.id.toLowerCase() !== "chatbox") {
        //press f
        if(placerOn == false){
            place(boostType);
        }

    }
    if ((event.key.toLowerCase() === turretKey) && document.activeElement.id.toLowerCase() !== "chatbox") {
        //press h
        if(placerOn == false){
            place(turretType);
        }

    }
    if ((event.key.toLowerCase() === millKey) && document.activeElement.id.toLowerCase() !== "chatbox") {
        //press h
        if(placerOn == false){
            place(millType);
        }

    }
    if (event.keyCode == 76 && document.activeElement.id.toLowerCase() !== "chatbox") {
        if(placerOn == false){
            placerOn = true
        } else{placerOn = false}
        change('placer', placerOn);
    }
    if (event.keyCode == 86 && document.activeElement.id.toLowerCase() !== "chatbox") {
        ws.send(new Uint8Array(Array.from(msgpack.encode(['c', [0, 53, 0]]))));
        ws.send(new Uint8Array(Array.from(msgpack.encode(['F', [1, null]]))));
        ws.send(new Uint8Array(Array.from(msgpack.encode(['F', [0, null]]))));
        ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [secondary, true]]))));

        setTimeout(() => {//time wait
            ws.send(new Uint8Array(Array.from(msgpack.encode(['c', [0, 7, 0]]))));//press v for bull
            ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [primary, true]]))));
            ws.send(new Uint8Array(Array.from(msgpack.encode(['F', [1, null]]))));
            ws.send(new Uint8Array(Array.from(msgpack.encode(['F', [0, null]]))));
            setTimeout(() => {//time reset
                ws.send(new Uint8Array(Array.from(msgpack.encode(['c', [0, 6, 0]]))));
                ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [myPlayer.weapon, true]]))));
            }, 70);
        }, 120);
    }
    if (event.keyCode == 80 && document.activeElement.id.toLowerCase() !== "chatbox") {
        if(heal == false){
            heal = true
        } else{heal = false}
        change('healer', heal);
    }
    if (event.keyCode == 71 && document.activeElement.id.toLowerCase() !== "chatbox") {
        ws.send(new Uint8Array(Array.from(msgpack.encode(['c', [0, 0, 0]]))));//press g for NOTHING
    }
    if (event.keyCode == 16 && document.activeElement.id.toLowerCase() !== "chatbox") {
        ws.send(new Uint8Array(Array.from(msgpack.encode(['c', [0, 6, 0]]))));//press shift for Soldier
    }
    if (event.keyCode == 90 && document.activeElement.id.toLowerCase() !== "chatbox") {
        ws.send(new Uint8Array(Array.from(msgpack.encode(['c', [0, 40, 0]]))));//press Z for tank

    }

});
document.addEventListener('keyup', event => {
  if (["allianceinput", "chatbox", "nameinput", "storeHolder"].includes(document.activeElement.id.toLowerCase())) {
    return null;
  }
  placers.forEach(_0x5c698d => {
    _0x5c698d.stop(event.key.toLowerCase());
  });
});
let oldWeapon = myPlayer.weapon;
document.addEventListener("mousedown", event => {
    oldWeapon = myPlayer.weapon;
    if(event.button == 2 && document.activeElement.id.toLowerCase() !== 'chatbox' && secondary == 10){
        ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [secondary, true]]))));
        ws.send(new Uint8Array(Array.from(msgpack.encode(['K', [1, 1]]))));
    }
});
document.addEventListener("mouseup", event => {
    if(event.button == 2 && document.activeElement.id.toLowerCase() !== 'chatbox' && secondary == 10){
        ws.send(new Uint8Array(Array.from(msgpack.encode(['z', [oldWeapon, true]]))));
        ws.send(new Uint8Array(Array.from(msgpack.encode(['K', [1, 1]]))));
    }
});
document.addEventListener("wheel", event => {
    //ws.send(new Uint8Array(Array.from(msgpack.encode(['F', [1, null]]))));
   // ws.send(new Uint8Array(Array.from(msgpack.encode(['F', [0, null]]))));

});
function update() {
    for (let i=0;i<9;i++){
        if (document.getElementById('actionBarItem' + i.toString()).offsetParent !== null) {
            primary = i;
        }
    }

    for (let i=9;i<16;i++){
        if (document.getElementById('actionBarItem' + i.toString()).offsetParent !== null) {
            secondary = i;
        }
    }
    for (let i = 22; i < 26; i++) {
        if (document.getElementById('actionBarItem' + i.toString()).offsetParent !== null) {
            spikeType = i - 16;
        }
    }
    for (let i = 31; i < 33; i++) {
        if (document.getElementById("actionBarItem" + i.toString()).offsetParent !== null) {
            boostType = i - 16;
        }
    }
    for (let i = 16; i < 19; i++) {
        if (document.getElementById("actionBarItem" + i.toString()).offsetParent !== null) {
            foodType = i - 16;
        }
    }
    for (let i = 33; i < 36; i++) {
        if (document.getElementById('actionBarItem' + i.toString()).offsetParent !== null) {
            turretType = i - 16;
        }
    }
    for (let i=37;i<39;i++){
        if (document.getElementById("actionBarItem" + i.toString()).offsetParent !== null) {
            turretType = i - 16;
        }
    }
    for (let i = 26; i < 29; i++) {
        if (document.getElementById("actionBarItem" + i.toString()).offsetParent !== null) {
            millType = i - 16;
        }
    }
}
